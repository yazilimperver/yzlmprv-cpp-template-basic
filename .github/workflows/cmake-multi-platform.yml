name: Yazilimperver CMake Multiplatform Github Actions Template

on: [push, pull_request]

env:
  CMAKE_VERSION: "3.29.6"
  NINJA_VERSION: "1.12.1"
  BUILD_TYPE: Release
  CCACHE_VERSION: "4.10"

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC",
            os: windows-latest,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
#        - {
#            name: "Windows Latest MinGW", artifact: "Windows-MinGW",
#            os: windows-latest,
#            cc: "gcc", cxx: "g++"
#          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }
#        - {
#            name: "macOS Latest Clang", artifact: "macOS",
#            os: macos-latest,
#            cc: "clang", cxx: "clang++"
#          }

    steps:
    - uses: actions/checkout@v4

    - name: Greeting-Windows
      if: runner.os == 'Windows'
      run: |
        echo "Yazilimperver Github Actions started from Windows!"

    - name: Greeting-Linux
      if: runner.os == 'Linux'
      run: |
        echo "Yazilimperver Github Actions started from Linux!"    

    - name: Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt install clang-tidy -y    

    - name: Download Ninja and CMake
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        set(ninja_version $ENV{NINJA_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "windows-x86_64.zip")
          set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "macos-universal.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Add to PATH environment variable
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Download ccache
      id: ccache
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ccache_dir "ccache-$ENV{CCACHE_VERSION}-windows-x86_64")
          set(ccache_archive "${ccache_dir}.zip")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ccache_dir "ccache-$ENV{CCACHE_VERSION}-linux-x86_64")
          set(ccache_archive "${ccache_dir}.tar.xz")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ccache_dir "ccache-$ENV{CCACHE_VERSION}-darwin")
          set(ccache_archive "${ccache_dir}.tar.gz")
        endif()

        set(ccache_url "https://github.com/ccache/ccache/releases/download/v$ENV{CCACHE_VERSION}/${ccache_archive}")
        file(DOWNLOAD "${ccache_url}" ./${ccache_archive} SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./${ccache_archive})

        # Add to PATH environment variable
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${ccache_dir}" ccache_dir)
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${ccache_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(COMMAND chmod +x ${ccache_dir}/ccache)
        endif()

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        file(APPEND "$ENV{GITHUB_OUTPUT}" "timestamp=${current_date}")

    - name: ccache cache files
      uses: actions/cache@v4
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-

    - name: CMake Release Configuration
      id: CMake-Release
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake --preset release-msvc
          cmake --build --preset release-msvc
        elif [ "$RUNNER_OS" == "Linux" ]; then
          cmake --preset release-gcc
          cmake --build --preset release
        fi
      shell: bash

    - name: CMake Debug Configuration
      id: CMake-Debug
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake --preset debug-msvc
          cmake --build --preset debug-msvc
        elif [ "$RUNNER_OS" == "Linux" ]; then
          cmake --preset debug-gcc
          cmake --build --preset debug
        fi
      shell: bash
    # - name: Configure CMake
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    # - name: Build
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}

